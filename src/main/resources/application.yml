spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${CLIENT_ID}  # 카카오 개발자 - 내 애플리케이션 - REST API 키
            scope:
              - profile_nickname
              - profile_image
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-name: Kakao
            client-authentication-method: POST
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_SENDER}   # 구글 계정명
    password: ${MAIL_PASSWORD} # 구글 계정 앱 비밀번호
    properties:
      mail:
        smtp:
          starttls:
            enable: true
            required: true
          auth: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  datasource:
    master:
      hikari:
        username: ${MASTER}     # 마스터 서버 사용자명
        password: ${MASTER_PW}  # 마스터 서버 사용자 패스워드
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: ${MASTER_URL} # 마스터 서버 주소
    slave:
      hikari:
        username: ${SLAVE}      # 슬레이브 서버 사용자명
        password: ${SLAVE_PW}   # 슬레이브 서버 사용자 패스워드
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: ${SLAVE_URL}  # 슬레이브 서버 주소


  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  jpa:
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        default_batch_fetch_size: 1000
        format_sql: true
    show-sql: true

logging:
  level:
    org.springframework.security: DEBUG

jwt:
  secret-key: ${JWT_SECRET_KEY}       # jwt 토큰 시크릿 키
  token:
    expired-time-ms: ${EXPIRED_TIME}  # 토큰 만료 시간

cloud:
  aws:
    s3:
      product-bucket: ${PRODUCT_BUCKET}    # 상품 S3 커킷 이름
      productIntrod-bucket: ${PRODUCT_INTROD_BUCKET}   # 상품소개 S3 커킷 이름
      brand-bucket: ${BRAND_BUCKET}  # 브랜드 S3 버킷 이름
      review-bucket: ${REVIEW_BUCKET}  # 리뷰 S3 버킷 이름
    credentials:
      access-key: ${AWS_S3_ACCESS_KEY}  # AWS ACCESS 키
      secret-key: ${AWS_S3_SECRET_KEY}  # AWS SECRET 키
    region:
      static: ${REGION}  # AWS 지역
      auto: false
    stack:
      auto: false

imp:
  imp-key: ${MY_IMP_KEY}  # 포트원 REST API 키
  imp-secret: ${MY_IMP_SECRET}  # 포트원 REST API 시크릿 키


